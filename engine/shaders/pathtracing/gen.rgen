#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

#define MAX_RAY_DEPTH 5

layout(push_constant, std430) uniform pc {
    int frame;
    int lightCount;
    uint frameCount;
};

layout(set = 3, binding = 0) uniform CamBufferObject {
    mat4 view;
    mat4 proj;
    mat4 iview;
    mat4 iproj;
}
CamUBO[];

layout(set = 4, binding = 0, rgba32f) uniform image2D rtTextures[];

layout(set = 5, binding = 0) uniform accelerationStructureEXT TLAS[];

#include "../includes/raypayloads.glsl"
layout(location = 0) rayPayloadEXT PrimaryPayload payload;

vec3 getDir(vec2 uv) {
    // convert the uv to a -1 to 1 range (ndc)
    vec2 ndc = uv * 2.0f - 1.0f;

    // reconstruct the clip space pos from the ndc coords
    vec4 clip = vec4(ndc, 1.0f, 1.0f);

    // transform to view space by multiplying by the inv proj
    vec4 view = CamUBO[frame].iproj * clip;

    // get the view dir by perspective dividing and normalizing it
    vec3 viewDir = normalize(view.xyz / view.w);

    // multiply the dir by the inverse view matrix to get dir in world space
    return (CamUBO[frame].iview * vec4(viewDir, 0.0f)).xyz;
}

#include "../includes/random.glsl"

void main() {
    uint seed = createSeed(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, frameCount);

    vec2 jitter = jitter(seed);
    vec2 uv = (jitter + vec2(gl_LaunchIDEXT.xy)) / vec2(gl_LaunchSizeEXT.xy);

    // init payload
    payload.ray.pos = CamUBO[frame].iview[3].xyz;
    payload.ray.dir = getDir(uv);
    payload.ray.terminate = false;

    payload.seed = seed;

    payload.col = vec3(0.0f);
    payload.throughput = vec3(1.0f);
    payload.rec = 0;

    for (uint i = 0; i < MAX_RAY_DEPTH; i++) {
        payload.rec = i;

        traceRayEXT(
            TLAS[frame],
            gl_RayFlagsOpaqueEXT,  // flags
            0xFF,                  // cull mask
            0,                     // sbt offset
            0,                     // sbt stride
            0,                     // miss index
            payload.ray.pos,       // pos
            0.0f,                  // min-range
            payload.ray.dir,       // dir
            100.0f,                // max-range
            0                      // payload
        );

        if (payload.ray.terminate) {
            break;
        }
    }

    int base = frame * 2;
    ivec2 imgUV = ivec2(gl_LaunchIDEXT.xy);

    vec3 accumulated = (frameCount > 1) ? imageLoad(rtTextures[base + 1], imgUV).rgb + payload.col : payload.col;
    imageStore(rtTextures[base + 1], imgUV, vec4(accumulated, 1.0f));

    vec3 color = accumulated / float(frameCount);
    vec3 toneMapped = color / (color + 1.0f);
    imageStore(rtTextures[base], imgUV, vec4(toneMapped, 1.0f));
}
