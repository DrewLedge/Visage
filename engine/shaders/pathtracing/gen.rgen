#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

layout(push_constant, std430) uniform pc {
    int frame;
};

layout(set = 3, binding = 0) uniform CamBufferObject {
    mat4 view;
    mat4 proj;
    mat4 iview;
    mat4 iproj;
}
CamUBO[];

layout(set = 4, binding = 0, rgba16f) uniform image2D rtTextures[];

layout(set = 5, binding = 0) uniform accelerationStructureEXT TLAS[];

#include "../includes/raypayloads.glsl"
layout(location = 0) rayPayloadEXT PrimaryPayload payload;

vec3 getDir(vec2 uv) {
    // convert the uv to a -1 to 1 range (ndc)
    vec2 ndc = uv * 2.0f - 1.0f;

    // reconstruct the clip space pos from the ndc coords
    vec4 clip = vec4(ndc, 1.0f, 1.0f);

    // transform to view space by multiplying by the inv proj
    vec4 view = CamUBO[frame].iproj * clip;

    // get the view dir by perspective dividing and normalizing it
    vec3 viewDir = normalize(view.xyz / view.w);

    // multiply the dir by the inverse view matrix to get dir in world space
    return (CamUBO[frame].iview * vec4(viewDir, 0.0f)).xyz;
}

void main() {
    vec2 uv = (0.5f + vec2(gl_LaunchIDEXT.xy)) / vec2(gl_LaunchSizeEXT.xy);
    vec3 pos = CamUBO[frame].iview[3].xyz;
    vec3 dir = getDir(uv);

    payload.col = vec3(0.0f);
    payload.rec = 0;

    traceRayEXT(
        TLAS[frame],
        0,       // flags
        0xFF,    // cull mask
        0,       // sbt offset
        0,       // sbt stride
        0,       // miss index
        pos,     // pos
        0.0f,    // min-range
        dir,     // dir
        100.0f,  // max-range
        0        // payload
    );

    imageStore(rtTextures[frame], ivec2(gl_LaunchIDEXT.xy), vec4(payload.col, 1.0f));
}
